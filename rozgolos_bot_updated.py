import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, ContextTypes, filters

TOKEN = "7859058780:AAHvBh7w7iNvc8KLE9Eq0RMfmjdwKYuAFOA"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

WELCOME_TEXT = "üëã –í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è"
IMAGE_URL = "https://rozgolos.online/static/telegram-start.jpg"

keyboard = [
    [
        InlineKeyboardButton("üì≤ Android", url="https://play.google.com/store/apps/details?id=com.rozgolos"),
        InlineKeyboardButton("üçè iOS", url="https://apps.apple.com/app/id6739999117")
    ],
    [
        InlineKeyboardButton("üåê –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç", url="https://rozgolos.online/bronyuvannya?utm_source=fb&utm_medium=paid_social&utm_campaign=RozgolosTelegram&utm_content=RozgolosTelegram&utm_term=RozgolosTelegram&fbclid=fbclid")
    ],
    [
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue")
    ]
]

reply_markup = InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await context.bot.send_photo(
        chat_id=chat_id,
        photo=IMAGE_URL,
        caption=WELCOME_TEXT,
        reply_markup=reply_markup
    )

async def handle_continue(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–î—è–∫—É—î–º–æ, –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—É
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_text))
    app.add_handler(MessageHandler(filters.VIDEO, handle_text))
    app.add_handler(MessageHandler(filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_TITLE, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_PHOTO, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.DELETE_CHAT_PHOTO, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GROUP_CHAT_CREATED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.SUPERGROUP_CHAT_CREATED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.CHANNEL_CHAT_CREATED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.MIGRATE_TO_CHAT_ID, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.MIGRATE_FROM_CHAT_ID, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.PINNED_MESSAGE, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.MESSAGE_AUTO_DELETE_TIMER_CHANGED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.FORUM_TOPIC_CREATED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.FORUM_TOPIC_CLOSED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.FORUM_TOPIC_REOPENED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GENERAL_FORUM_TOPIC_HIDDEN, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GENERAL_FORUM_TOPIC_UNHIDDEN, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.WRITE_ACCESS_ALLOWED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.USER_SHARED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.CHAT_SHARED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.STORY, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.BOOST_ADDED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.BOOST_REMOVED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GIVEAWAY_CREATED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GIVEAWAY_COMPLETED, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.GIVEAWAY_WON, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.StatusUpdate.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.add_handler(MessageHandler(filters.ALL, handle_text))
    
    app.add_handler(MessageHandler(filters.ALL, handle_text))

    app.run_polling()

if __name__ == '__main__':
    main()
