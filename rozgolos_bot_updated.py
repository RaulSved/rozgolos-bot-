import asyncio
import logging
import nest_asyncio
from os import getenv
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

# –°—Ç–∞–Ω –∞–Ω–∫–µ—Ç–∏
FULL_NAME, EMAIL, PHONE, PLATFORM = range(4)

# –õ–æ–≥–∏
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_photo(photo=open("rozgolos_start.jpg", "rb"))
    except FileNotFoundError:
        await update.message.reply_text("‚ö†Ô∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–¥–æ–≤–∂–∏–º–æ –±–µ–∑ –Ω—å–æ–≥–æ.")

    await update.message.reply_text(
        "üá∫üá¶ –í–∞—Å –≤—ñ—Ç–∞—î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É *ROZGOLOS*.\n\n"
        "–î–ª—è –∑–∞–ø—É—Å–∫—É ‚Äî –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –∞–Ω–∫–µ—Ç—É –Ω–∏–∂—á–µ. –¶–µ –∑–∞–π–º–µ –º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏.\n\n"
        "üîΩ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏*, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏"]], resize_keyboard=True),
        parse_mode="Markdown"
    )
    return FULL_NAME

# –û—Ç—Ä–∏–º—É—î–º–æ –ü–Ü–ë
async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.lower() == "–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏":
        await update.message.reply_text("üë§ –í–≤–µ–¥—ñ—Ç—å *–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è*:", parse_mode="Markdown")
        return FULL_NAME
    else:
        context.user_data['full_name'] = update.message.text
        await update.message.reply_text("üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à Email:")
        return EMAIL

# Email
async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

# –¢–µ–ª–µ—Ñ–æ–Ω ‚Üí –ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∏
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['phone'] = update.message.text

    buttons = [
        [InlineKeyboardButton("üì± Android", url="https://play.google.com/store/apps/details?id=com.rozgolos")],
        [InlineKeyboardButton("üçè iOS", url="https://apps.apple.com/app/id6739999117")],
    ]

    await update.message.reply_text(
        "‚¨áÔ∏è –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return PLATFORM

# –û–° ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['platform'] = update.message.text

    await update.message.reply_text(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!\n\n"
        f"*–ü–Ü–ë:* {context.user_data.get('full_name')}\n"
        f"*Email:* {context.user_data.get('email')}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data.get('phone')}\n"
        f"*–û–°:* {context.user_data.get('platform')}",
        parse_mode="Markdown"
    )

    await update.message.reply_text("üôè –î—è–∫—É—î–º–æ! –ó –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –Ω–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    nest_asyncio.apply()
    TOKEN = getenv("BOT_TOKEN") or "–≤—Å—Ç–∞–≤_—Å–≤—ñ–π_—Ç–µ—Å—Ç–æ–≤–∏–π_—Ç–æ–∫–µ–Ω_—Å—é–¥–∏"
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PLATFORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_platform)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
