
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
import os

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# States for conversation
FULL_NAME, EMAIL, PHONE, PLATFORM = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_photo(photo=open("rozgolos_start.jpg", "rb"))
    await update.message.reply_text(
        f"""üá∫üá¶ –í–∞—Å –≤—ñ—Ç–∞—î –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –±–æ—Ç –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É *ROZGOLOS*.

–î–ª—è –∑–∞–ø—É—Å–∫—É ‚Äî –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É –∞–Ω–∫–µ—Ç—É –Ω–∏–∂—á–µ. –¶–µ –∑–∞–π–º–µ –º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏.

üîΩ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏* —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.""",
        reply_markup=ReplyKeyboardMarkup([['–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏']], resize_keyboard=True),
        parse_mode="Markdown"
    )
    return FULL_NAME

async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text("üìß –í–≤–µ–¥—ñ—Ç—å –≤–∞—à Email:")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    await update.message.reply_text("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['phone'] = update.message.text
    await update.message.reply_text(
     await update.message.reply_text(
    "üì± –Ø–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ –≤–∞—à–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ?\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: Android –∞–±–æ iOS"
)
    return PLATFORM

async def get_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['platform'] = update.message.text
    user_data = context.user_data
    await update.message.reply_text(
        f"""‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!

*–ü–Ü–ë:* {user_data['full_name']}
*Email:* {user_data['email']}
*–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data['phone']}
*–û–°:* {user_data['platform']}""",
        parse_mode="Markdown"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    TOKEN = os.environ.get("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PLATFORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_platform)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
