import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os

TOKEN = "7666787687:AAHbD..."  # –≤—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π —Ä–æ–±–æ—á–∏–π —Ç–æ–∫–µ–Ω

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
keyboard_main = [
    [InlineKeyboardButton("üì± Android", url="https://play.google.com/store/apps/details?id=com.rozgolos")],
    [InlineKeyboardButton("ü•è iOS", url="https://apps.apple.com/app/id6739999117")],
    [InlineKeyboardButton("üåê –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç", url="https://rozgolos.online/bronyuvannya?utm_source=fb&utm_medium=paid_social&utm_campaign=RozgolosTelegram&utm_content=RozgolosTelegram&utm_term=RozgolosTelegram")],
    [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue")]
]

# –û–±—Ä–æ–±–Ω–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    photo_path = os.path.join(os.path.dirname(__file__), "start.jpg")

    if os.path.exists(photo_path):
        with open(photo_path, "rb") as photo:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è",
        reply_markup=InlineKeyboardMarkup(keyboard_main)
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "continue":
        await query.edit_message_text(text="üôè –î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –∑–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞!")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (–ü–Ü–ë, email, —Ç–µ–ª–µ—Ñ–æ–Ω...)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.effective_chat.id

    logger.info(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {user_id}: {text}")
    await update.message.reply_text("üôè –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—ñ –¥–∞–Ω—ñ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏\" –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
